import { MD3LightTheme, MD3DarkTheme } from 'react-native-paper';

const commonValues = {};

export const Theme = {
  light: {
    ...MD3LightTheme,
    ...commonValues,
    colors: {
      ...MD3LightTheme.colors,
      primary: 'rgb(112, 69, 184)',
      onPrimary: 'rgb(255, 255, 255)',
      primaryContainer: 'rgb(235, 220, 255)',
      onPrimaryContainer: 'rgb(39, 0, 88)',
      secondary: 'rgb(159, 38, 158)',
      onSecondary: 'rgb(255, 255, 255)',
      secondaryContainer: 'rgb(255, 215, 246)',
      onSecondaryContainer: 'rgb(56, 0, 56)',
      tertiary: 'rgb(0, 108, 79)',
      onTertiary: 'rgb(255, 255, 255)',
      tertiaryContainer: 'rgb(133, 248, 203)',
      onTertiaryContainer: 'rgb(0, 33, 22)',
      error: 'rgb(186, 26, 26)',
      onError: 'rgb(255, 255, 255)',
      errorContainer: 'rgb(255, 218, 214)',
      onErrorContainer: 'rgb(65, 0, 2)',
      background: 'rgb(255, 251, 255)',
      onBackground: 'rgb(29, 27, 30)',
      surface: 'rgb(255, 251, 255)',
      onSurface: 'rgb(29, 27, 30)',
      surfaceVariant: 'rgb(232, 224, 235)',
      onSurfaceVariant: 'rgb(73, 69, 78)',
      outline: 'rgb(122, 117, 127)',
      outlineVariant: 'rgb(203, 196, 207)',
      shadow: 'rgb(0, 0, 0)',
      scrim: 'rgb(0, 0, 0)',
      inverseSurface: 'rgb(50, 48, 51)',
      inverseOnSurface: 'rgb(245, 239, 244)',
      inversePrimary: 'rgb(212, 187, 255)',
      elevation: {
        level0: 'transparent',
        level1: 'rgb(248, 242, 251)',
        level2: 'rgb(244, 236, 249)',
        level3: 'rgb(239, 231, 247)',
        level4: 'rgb(238, 229, 247)',
        level5: 'rgb(235, 226, 245)',
      },
      surfaceDisabled: 'rgba(29, 27, 30, 0.12)',
      onSurfaceDisabled: 'rgba(29, 27, 30, 0.38)',
      backdrop: 'rgba(51, 47, 55, 0.4)',
      success: 'rgb(16, 109, 32)',
      onSuccess: 'rgb(255, 255, 255)',
      successContainer: 'rgb(157, 248, 152)',
      onSuccessContainer: 'rgb(0, 34, 4)',
      warning: 'rgb(135, 82, 0)',
      onWarning: 'rgb(255, 255, 255)',
      warningContainer: 'rgb(255, 221, 186)',
      onWarningContainer: 'rgb(43, 23, 0)',
    },
  },
  dark: {
    ...MD3DarkTheme,
    ...commonValues,
    colors: {
      ...MD3DarkTheme.colors,
      primary: 'rgb(212, 187, 255)',
      onPrimary: 'rgb(64, 6, 135)',
      primaryContainer: 'rgb(88, 42, 159)',
      onPrimaryContainer: 'rgb(235, 220, 255)',
      secondary: 'rgb(255, 170, 244)',
      onSecondary: 'rgb(91, 0, 92)',
      secondaryContainer: 'rgb(129, 0, 130)',
      onSecondaryContainer: 'rgb(255, 215, 246)',
      tertiary: 'rgb(104, 219, 176)',
      onTertiary: 'rgb(0, 56, 40)',
      tertiaryContainer: 'rgb(0, 81, 59)',
      onTertiaryContainer: 'rgb(133, 248, 203)',
      error: 'rgb(255, 180, 171)',
      onError: 'rgb(105, 0, 5)',
      errorContainer: 'rgb(147, 0, 10)',
      onErrorContainer: 'rgb(255, 180, 171)',
      background: 'rgb(29, 27, 30)',
      onBackground: 'rgb(230, 225, 230)',
      surface: 'rgb(29, 27, 30)',
      onSurface: 'rgb(230, 225, 230)',
      surfaceVariant: 'rgb(73, 69, 78)',
      onSurfaceVariant: 'rgb(203, 196, 207)',
      outline: 'rgb(148, 142, 153)',
      outlineVariant: 'rgb(73, 69, 78)',
      shadow: 'rgb(0, 0, 0)',
      scrim: 'rgb(0, 0, 0)',
      inverseSurface: 'rgb(230, 225, 230)',
      inverseOnSurface: 'rgb(50, 48, 51)',
      inversePrimary: 'rgb(112, 69, 184)',
      elevation: {
        level0: 'transparent',
        level1: 'rgb(38, 35, 41)',
        level2: 'rgb(44, 40, 48)',
        level3: 'rgb(49, 45, 55)',
        level4: 'rgb(51, 46, 57)',
        level5: 'rgb(55, 49, 62)',
      },
      surfaceDisabled: 'rgba(230, 225, 230, 0.12)',
      onSurfaceDisabled: 'rgba(230, 225, 230, 0.38)',
      backdrop: 'rgba(51, 47, 55, 0.4)',
      success: 'rgb(130, 219, 126)',
      onSuccess: 'rgb(0, 57, 10)',
      successContainer: 'rgb(0, 83, 18)',
      onSuccessContainer: 'rgb(157, 248, 152)',
      warning: 'rgb(255, 184, 101)',
      onWarning: 'rgb(72, 42, 0)',
      warningContainer: 'rgb(102, 61, 0)',
      onWarningContainer: 'rgb(255, 221, 186)',
    },
  },
};

export type DarkAppTheme = typeof Theme.light;
export type LightAppTheme = typeof Theme.dark;
